"""initial

Revision ID: dfd0fbd20aed
Revises: 
Create Date: 2024-06-01 02:37:47.579951

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "dfd0fbd20aed"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "crop",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_crop_created_at"), "crop", ["created_at"], unique=False)
    op.create_table(
        "future_climate_data",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("longitude", sa.Integer(), nullable=False),
        sa.Column("latitude", sa.Integer(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("month", sa.Integer(), nullable=False),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeogFromText",
                name="geography",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("u_component_of_wind_10m", sa.Float(), nullable=False),
        sa.Column("v_component_of_wind_10m", sa.Float(), nullable=False),
        sa.Column("temperature_2m", sa.Float(), nullable=False),
        sa.Column("evaporation", sa.Float(), nullable=False),
        sa.Column("total_precipitation", sa.Float(), nullable=False),
        sa.Column("surface_pressure", sa.Float(), nullable=False),
        sa.Column("surface_solar_radiation_downwards", sa.Float(), nullable=False),
        sa.Column("surface_thermal_radiation_downwards", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "location",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("country", "name", name="_country_name_uc"),
        sa.UniqueConstraint("longitude", "latitude", name="_longitude_latitude_uc"),
    )
    op.create_index(op.f("ix_location_country"), "location", ["country"], unique=False)
    op.create_index(
        op.f("ix_location_created_at"), "location", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_location_name"), "location", ["name"], unique=False)
    op.create_table(
        "crop_yield_data",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("location_id", sa.Uuid(), nullable=False),
        sa.Column("ph", sa.Float(), nullable=False),
        sa.Column("crop_id", sa.Uuid(), nullable=False),
        sa.Column("sowing_year", sa.Integer(), nullable=False),
        sa.Column("sowing_month", sa.Integer(), nullable=False),
        sa.Column("harvest_year", sa.Integer(), nullable=False),
        sa.Column("harvest_month", sa.Integer(), nullable=False),
        sa.Column("_yield", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["crop_id"],
            ["crop.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "past_climate_data",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("location_id", sa.Uuid(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("month", sa.Integer(), nullable=False),
        sa.Column("u_component_of_wind_10m", sa.Float(), nullable=False),
        sa.Column("v_component_of_wind_10m", sa.Float(), nullable=False),
        sa.Column("temperature_2m", sa.Float(), nullable=False),
        sa.Column("evaporation", sa.Float(), nullable=False),
        sa.Column("total_precipitation", sa.Float(), nullable=False),
        sa.Column("surface_pressure", sa.Float(), nullable=False),
        sa.Column("surface_solar_radiation_downwards", sa.Float(), nullable=False),
        sa.Column("surface_thermal_radiation_downwards", sa.Float(), nullable=False),
        sa.Column("surface_net_solar_radiation", sa.Float(), nullable=False),
        sa.Column("surface_net_thermal_radiation", sa.Float(), nullable=False),
        sa.Column("precipitation_type", sa.Float(), nullable=False),
        sa.Column("snowfall", sa.Float(), nullable=False),
        sa.Column("total_cloud_cover", sa.Float(), nullable=False),
        sa.Column("dewpoint_temperature_2m", sa.Float(), nullable=False),
        sa.Column("soil_temperature_level_1", sa.Float(), nullable=False),
        sa.Column("volumetric_soil_water_layer_1", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(["location_id"], ["location.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("past_climate_data")
    op.drop_table("crop_yield_data")
    op.drop_index(op.f("ix_location_name"), table_name="location")
    op.drop_index(op.f("ix_location_created_at"), table_name="location")
    op.drop_index(op.f("ix_location_country"), table_name="location")
    op.drop_table("location")
    op.drop_table("future_climate_data")
    op.drop_index(op.f("ix_crop_created_at"), table_name="crop")
    op.drop_table("crop")
    # ### end Alembic commands ###
